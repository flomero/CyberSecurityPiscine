#!./env/bin/python3

import argparse
import difflib
from bs4 import BeautifulSoup
import requests
import json
from testpayloads import test_injections
import typing
from colorama import Fore, Style
import time

DEFAULT_OUTPUT_FILE = 'report.json'
DEFAULT_USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'

ERROR_STRINGS = [
	"You have an error in your SQL syntax",  # MySQL
	"mysql_fetch_array()",  # MySQL
	"SQL syntax",  # Generic error, especially for MySQL
	"Warning: mysql_",  # MySQL errors
	"invalid SQL statement",  # SQLite
	"could not execute statement",  # SQLite
	" syntax error",  # SQLite
	"unrecognized token",  # SQLite
]

class Vaccine:
	def __init__(self, url, request, output, verbose: bool, limit_diff: int, agent: str):
		self.url = url
		self.request = request
		self.output_file = output
		self.verbose = verbose
		self.limit_diff = limit_diff
		self.result = {
			'url': url,
			'timestamp': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()),
			'vulnerable': False,
			'dbname': None,
			'method': request,
			'tests': {
				'basic-error': [],
				'union': [],
				'boolean': [],
			}
		}
		self.session = requests.Session()
		self.session.headers.update({
			'User-Agent': agent
		})
		self.forms = self.get_forms()
		try:
			if output:
				self.output = open(output, 'w')
			self.run()
		except Exception as e:
			print(e)

	@staticmethod
	def build_url(base: str, path: str) -> str:
		if base.endswith('/') and path.startswith('/'):
			return base + path[1:]
		elif not base.endswith('/') and not path.startswith('/'):
			return base + '/' + path
		else:
			return base + path

	def log(self, level: str, message: str):
		levels = {
			"info": Fore.CYAN + "[INFO]   " + Style.RESET_ALL,
			"warning": Fore.YELLOW + "[WARNING]" + Style.RESET_ALL,
			"error": 	Fore.RED + "[ERROR]  " + Style.RESET_ALL,
			"success": Fore.GREEN + "[SUCCESS]" + Style.RESET_ALL,
			"log": 		Fore.BLUE + "[LOG]    " + Style.RESET_ALL,
			"verbose": Fore.MAGENTA + "[VERBOSE]" + Style.RESET_ALL
		}
		if self.verbose or level != 'verbose':
			timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
			print(timestamp + ' ' + levels.get(level, "[UNKNOWN]") + " " + message)

	def get_forms(self) -> typing.List[dict]:
		try:
			response = self.session.get(self.url)
			soup = BeautifulSoup(response.text, 'html.parser')
			forms = soup.find_all('form')
		except Exception as e:
			self.log('error', f'Error while getting forms: {e}')
			raise SystemExit(1)
		form_details = []

		for form in forms:
			#check method
			if form.get('method').strip().upper() != self.request:
				self.log('warning', f'Invalid method {form.get("method")}')
				continue
			action = form.get('action') if form.get('action') else self.url
			if action.startswith('/'):
				action = self.build_url(self.url, action)
			form_details.append({
				'action': action,
				'method': form.get('method').strip().upper(),
				'inputs': [input.get('name') for input in form.find_all('input')]
			})

		return form_details

	def find_db_type(self, str):
		str	= str.lower()
		if self.result['dbname']:
			return
		if 'mysql' in str:
			self.result['dbname'] = 'mysql'
		elif 'mssql' in str:
			self.result['dbname'] = 'mssql'
		elif 'sqlite' in str:
			self.result['dbname'] = 'sqlite'
		elif 'oracle' in str:
			self.result['dbname'] = 'oracle'
		elif 'postgresql' in str:
			self.result['dbname'] = 'postgresql'
		if self.result['dbname']:
			self.log('success', f'Found database type: {self.result["dbname"]}')

	def find_error(self, response) -> str:
		for error in ERROR_STRINGS:
			if error in response.text:
				self.result['vulnerable'] = True
				self.log('success', f'Found possible sql injection in {response.url}')
				if error == 'invalid SQL statement' or error == 'unrecognized token':
					self.result['dbname'] = 'sqlite'
				elif error == 'You have an error in your SQL syntax':
					self.result['dbname'] = 'mysql'
				return error
		return None
		
	
	def save_result(self):
		if self.output:
			self.output.write(json.dumps(self.result, indent=4))
			self.log('success', f'Result saved in {self.output.name}')
		else:
			print(json.dumps(self.result, indent=4))

	def test_error_payloads(self):
		"""
		Test basic payloads that lead to errors in the response
		"""
		for form in self.forms:
			for test in test_injections["error"]:
				data = {}
				for input in form['inputs']:
					data[input] = test
				try:
					if form['method'] == 'GET':
						response = self.session.get(form['action'], params=data)
					elif form['method'] == 'POST':
						response = self.session.post(form['action'], data=data)
				except Exception as e:
					self.log('error', f'Error while sending request: {e}')
					continue
				error = self.find_error(response)
				if not error:
					self.log('verbose', f'No error for {form["action"]} with payload {test}')
					continue
				self.find_db_type(response.text)
				self.result['tests']['basic-error'].append({
					'payload': test,
					'error': error,
					'formurl': form['action'],
					'status': response.status_code,
					'formfields': form['inputs']
				})
				self.log('success', f'Found possible sql injection in {form["action"]} with payload {test}')

	def test_diff_payloads(self, key: str) -> None:
		"""
		Test payloads that use UNION SELECT to get data from the database
		"""
		if key not in test_injections:
			return
		for form in self.forms:
			for test in test_injections[key]:
				data = {}
				for input in form['inputs']:
					data[input] = '1'
				try:
					if form['method'] == 'GET':
						response_no_inj = self.session.get(form['action'], params=data)
					elif form['method'] == 'POST':
						response_no_inj = self.session.post(form['action'], data=data)
				except Exception as e:
					self.log('error', f'Error while sending request: {e}')
					continue
				data[input] = test
				try:
					if form['method'] == 'GET':
						response = self.session.get(form['action'], params=data)
					elif form['method'] == 'POST':
						response = self.session.post(form['action'], data=data)
				except Exception as e:
					self.log('error', f'Error while sending request: {e}')
					continue
				
				diff = difflib.ndiff(response_no_inj.text.splitlines(), response.text.splitlines())
				diff_lines = [line for line in diff if line.startswith('+ ') or line.startswith('- ')]
				# remove lines that are just + and spaces
				diff_lines = [line for line in diff_lines if len(line.strip()) > 2]
				for line in diff_lines:
					self.find_db_type(line)
				if len(diff_lines) > self.limit_diff:
					diff_lines = diff_lines[:self.limit_diff]
				if diff_lines:
					if key not in self.result['tests']:
						self.result['tests'][key] = []
					self.result['tests'][key].append({
						'payload': test,
						'formurl': form['action'],
						'status': response.status_code,
						'diff': diff_lines,
						'formfields': form['inputs']
					})
					self.log('success', f'Found possible sql injection in {form["action"]} with payload {test}')
					self.log('verbose', f"Difference for payload {test}:\n{diff_lines}")
				else:
					self.log('verbose', f"No significant difference for payload {test}")

	def run(self) -> None:
		if not self.forms:
			self.log('error', 'No form found')
			return
		self.test_error_payloads()
		self.test_diff_payloads('union')
		self.test_diff_payloads('boolean')
		if self.result['dbname'] == 'mysql':
			self.test_diff_payloads('mysql')
		elif self.result['dbname'] == 'sqlite':
			self.test_diff_payloads('sqlite')
		self.save_result()



if __name__ == '__main__':
	parser = argparse.ArgumentParser(
		description='Vaccine',
		epilog='A little program to find possible sql injection in a given Website')
	parser.add_argument(
		'url',
		help='The url to check')
	parser.add_argument(
		'-X',
		'--request',
		help='The request to send',
		default='GET',
		choices=['GET', 'POST'],
		type=str.upper)
	parser.add_argument(
		'-o',
		'--output',
		help='The output file to save the result',
		type=str,
		default=DEFAULT_OUTPUT_FILE,
		metavar='FILE')
	parser.add_argument(
		'-v',
		'--verbose',
		help='Enable verbose mode',
		action='store_true')
	parser.add_argument(
		'-l',
		'--limit-diff',
		help='Limit the number of different lines to show',
		type=int,
		default=30,
		choices=range(1, 1000),
		metavar='N'
	)
	parser.add_argument(
		'-a',
		'--agent',
		help='The user agent to use',
		default=DEFAULT_USER_AGENT,
		metavar='AGENT',
		type=str
	)
	
	args = parser.parse_args()
	Vaccine(args.url, args.request, args.output, args.verbose, args.limit_diff, args.agent)